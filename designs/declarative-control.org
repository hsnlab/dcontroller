#+LaTeX_HEADER:\usepackage[margin=2cm]{geometry}
#+LaTeX_HEADER:\usepackage{enumitem}
#+LaTeX_HEADER:\usepackage{tikz}
#+LATEX_HEADER:\usepackage{algpseudocode}
#+LATEX_HEADER:\DeclareMathOperator*{\argmin}{argmin}
#+LATEX_HEADER:\DeclareMathOperator*{\argmax}{argmax}
#+LATEX:\setitemize{noitemsep,topsep=0pt,parsep=0pt,partopsep=0pt}
#+OPTIONS: toc:t

#+TITLE: Declarative Kubernetes controllers
#+AUTHOR:

Preliminary design for the declarative Kubernetes controller runtime. The main goal is to reduce the mental overhead of writing Kubernetes controllers, by providing simple automations to eliminate some of the repetitive code that must be written when coding against the upstream [controller-runtime](https://github.com/kubernetes-sigs/controller-runtime) project. The final goal is to let anyone with minimal Go skills to write NoCode or LowCode style.

The main tools here are *declarative Kubernetes API translation* and *incremental reconciliation*. Declarative Kubernetes API translation allows to view the Kubernetes API as a NoSQL database and run simple declarative queries on it. This can be done by registering an aggregation pipeline (inspired by [[https://www.mongodb.com/docs/manual/core/aggregation-pipeline][MongoDB aggregators]] to map the Kubernetes API resources to a *view* of interest to the controller. These views are dynamically maintained by the declarative controller runtime, by running the aggregation pipeline on the watch events automatically installed for the base Kubernetes API resources on top of which the view is defined on. Incremental reconciliation then means that the controller can watch the incremental changes to the views, instead of the raw ("materialized") views, which simplifies writing [[https://hackernoon.com/level-triggering-and-reconciliation-in-kubernetes-1f17fe30333d][level-triggered conrollers]].

# Describe your change here.  This is purposefully freeform: we want
# enough information to evaluate the design, but not so much that you're
# annoyed by the overall design process and decide to bake cookies instead.

* Example

# Specify an example of how the user would use this.  It helps other
# contributors get a feel for how this will look in real code, and provides
# a good opportunity to evaluate the end-user feel of the code for yourself.

# If you find yourself groaning at verbosity, copy-and-pasting a lot, or
# writing a bunch of tiny helper functions, it's a good indication that you
# might need to re-evaluate the user experience of your design.

# This is also a good opportunity to stop and write a proof-of-concept, if
# you haven't already, which should help catch practical nits with the
# design.

#+BEGIN_SRC go
package main

import (
	"context"
	"os"

	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/manager/signals"

	dcontroller "hsnlab/declarative-controller/pkg/controller/differential" // use /controller/materialized for non-diff controller
	dmanager "hsnlab/declarative-controller/pkg/manager"
	pipeline "hsnlab/declarative-controller/pkg/pipeline"
	op "hsnlab/declarative-controller/pkg/pipeline/op"
	dreconcile "hsnlab/declarative-controller/pkg/reconcile"

	"sigs.k8s.io/controller-runtime/pkg/client/config"
)

func main() {
	log := logf.Log.WithName("manager-example")

	// Get cluster config
	cfg, err := config.GetConfig()
	if err != nil {
		log.Error(err, "unable to get kubeconfig")
		os.Exit(1)
	}

	// Create a declarative manager
	mgr, err := dmanager.New(cfg, dmanager.Options{})
	if err != nil {
		log.Error(err, "unable to set up manager")
		os.Exit(1)
	}

	// Register the "collections": a collection is a "controller" (as in controller-runtime/pkg/controller) plus a "watch" (as in controller-runtime/pkg/source) for an API resource

	// NewCollection:
	// - creates a K8s Controller and K8s Watch on the resource (the reconciler knows the event type)
	// - mgr.Start() will take care of starting the watch
	cd, err := mgr.NewCollection("CD", "configdeployments.v1alpha.declarative-controller")
	if err != nil {
		log.Error(err, "unable to register configdeployment collection")
		os.Exit(1)
	}

	cm, err := mgr.NewCollection("CM", "configmaps.v1.")
	if err != nil {
		log.Error(err, "unable to register configmap collection")
		os.Exit(1)
	}

	dp, err := mgr.NewCollection("DP", "deployments.v1.apps")
	if err != nil {
		log.Error(err, "unable to register deployment collection")
		os.Exit(1)
	}

	// Specify the "views" on the collections: a view is a user-defined aggregationquery on the
	// set of collections whose result is available as a "collection

	// - the below is equivalent to the SQL query (all resources in the same namespace)
	// ```
	// SELECT CD.Name, DP.Name, CM.RV
	// FROM ConfigDeployments CD
	// JOIN ConfigMaps CM
	// ON CD.CmName=CM.Name
	// JOIN Deployments DP
	// ON CD.DpName=DP.Name;
	// }
	// ```

	// CreateView takes a view name and an aggregation pipeline as input and creates a
	// materialized or differential view using the specified aggregation pipeline
	view, err := mgr.CreateView("VIEW", pipeline.Aggregate(
		op.Map(
			op.Field("CD", "$CD"),
			op.Field("CM", "$CM"),
			op.Field("DP", "$DP"),
		),
		op.Match(
			op.And(
				op.Eq("$CD.spec.cmName", "$CM.medatata.name"),
				op.Eq("$CD.medatata.namespace", "$CM.medatata.namespace"),
				op.Eq("$CD.spec.dpName", "$DP.medatata.name"),
				op.Eq("$CD.medatata.namespace", "$DP.medatata.namespace"),
			),
		),
		op.Map(
			op.Field("CD", "$CD"),
			op.Field("CM", "$CM"),
			op.Field("DP", "$DP"),
		),
	), cd, cm, dp)
	if err != nil {
		log.Error(err, "unable to create base view on the deployment collection")
		os.Exit(1)
	}

	// delta controller watches for deltas
	c, err := dcontroller.New("view-controller", mgr, dcontroller.Options{
		// reconcider must implement Create and Delete
		// dreconcile.Request contains an unstructured.Unstructured
		Reconciler: dreconcile.Reconciler{
			Upsert: func(ctx context.Context, req dreconcile.Request) (dreconcile.Result, error) {
				// update the deployment
				if mgr.Insert(dp, pipeline.Aggregate(
					op.Map(
						op.Field("name", "$name"),
						op.Field("namespace", "$namespace"),
						op.Field("spec",
							op.Field("template",
								op.Field("metadata",
									op.Field("labels",
										op.Field("configMapVersion", "$resourceVersion"),
									),
								),
							),
						),
					), req.Object)); err != nil {
					return dreconcile.Result{}, dreconcile.TerminalError{}
				}

				// update the configdeployment status
				if mgr.Insert(cd, pipeline.Aggregate(
					op.Map(
						op.Field("name", "$name"),
						op.Field("namespace", "$namespace"),
						op.Field("status",
							op.List(
								op.Field("type", "Programmed"),
								op.Field("status", "True"),
								op.Field("lastTransitionTime", "$date"),
							),
						),
					), req.Object)); err != nil {
					return dreconcile.Result{}, dreconcile.TerminalError{}
				}
				return dreconcile.Result{}, nil
			},
			Delete: func(context.Context, dreconcile.Request) (dreconcile.Result, error) {
				// no need to do anything
				return dreconcile.Result{}, nil
			},
		},
	})
	if err != nil {
		log.Error(err, "unable to create view controller")
		os.Exit(1)
	}

	// Watch for create / update / delete deltas on the view
	err = c.WatchDelta(view)
	if err != nil {
		log.Error(err, "unable to watch view")
		os.Exit(1)
	}

	// Start the Controller through the manager.
	if err := mgr.Start(signals.SetupSignalHandler()); err != nil {
		log.Error(err, "unable to continue running manager")
		os.Exit(1)
	}
}
#+END_SRC

* Declarative API translation

Query language usage alternatives:

1. ~@aggregate~ works on multiple collections simultaneously
   - input is the Cartesian product ~CD x CM x DP~ -- inefficient
   - first join and then map
     #+begin_src yaml
     - "@map":
         CD: "$CD"
         CM: "$CM"
         DP: "$DP"
     - "@match":
         "@and":
           - {"@eq": ["$CD.spec.cmName", "$CM.medatata.name"]}
           - {"@eq": ["$CD.medatata.namespace", "$CM.medatata.namespace"]}
           - {"@eq": ["$CD.spec.dpName", "$DP.medatata.name"]}
           - {"@eq": ["$CD.medatata.namespace", "$DP.medatata.namespace"]}
     - "@map":
         name: "$CD.medatata.name"
         namespace: "$CD.medatata.namespace"
         dpName: "$CD.spec.dpName"
         resourceVersion: "$CM.medatata.resourceVersion"
  #+end_src

2. ~@aggregate~ works on multiple collections simultaneously:
   - input is the Cartesian product CD x CM x DP -- inefficient
   - first map and then join
     #+begin_src yaml
     - "@map":
         CD:
           name: "$CD.metadata.name"
           namespace: "$CD.metadata.namespace"
           cmName: "$CD.spec.cmName"
           dpName: "$CD.spec.dpName"
         CM: 
           name: "$CM.metadata.name"
           namespace: "$CM.metadata.namespace"
           resourceVersion: "$CM.medatata.resourceVersion"
         DP:
           name: "$DP.metadata.name"
           namespace: "DP.metadata.namespace"
     - "@match":
         "@and":
           - {"@eq": ["$CD.cmName", "$CM.name"]}
           - {"@eq": ["$CD.namespace", "$CM.namespace"]}
           - {"@eq": ["$CD.dpName", "$DP.name"]}
           - {"@eq": ["$CD.namespace", "$DP.namespace"]}
     - "@map":
         name: "$CD.name"
         namespace: "$CD.namespace"
         dpName: "$CD.dpName"
         resourceVersion: "$CM.resourceVersion"
  #+end_src

3. ~@aggregate~ works on multiple collections simultaneously:
   - input is the Cartesian product ~CD x CM x DP~ -- inefficient
   - first map and then join
     #+begin_src yaml
     - "@map":
         CD:
           name: "$CD.metadata.name"
           namespace: "$CD.metadata.namespace"
           cmName: "$CD.spec.cmName"
           dpName: "$CD.spec.dpName"
         CM: 
           name: "$CM.metadata.name"
           namespace: "$CM.metadata.namespace"
           resourceVersion: "$CM.medatata.resourceVersion"
         DP:
           name: "$DP.metadata.name"
           namespace: "DP.metadata.namespace"
     - "@match":
         "@and":
           - {"@eq": ["$CD.cmName", "$CM.name"]}
           - {"@eq": ["$CD.namespace", "$CM.namespace"]}
           - {"@eq": ["$CD.dpName", "$DP.name"]}
           - {"@eq": ["$CD.namespace", "$DP.namespace"]}
     - "@map":
         name: "$CD.name"
         namespace: "$CD.namespace"
         dpName: "$CD.dpName"
         resourceVersion: "$CM.resourceVersion"
     #+end_src

* Implementation

#+begin_src go
func RegisterCollection(...){
	c, err := dcontroller.New("pod-controller", mgr, dcontroller.Options{
		// dreconcile.Request knows the event type!
		Reconciler: dreconcile.Func(func(context.Context, dreconcile.Request) (dreconcile.Result, error) {
			// Business logic to implement the API by creating, updating, deleting objects goes here.
			return dreconcile.Result{}, nil
		}),
	})
	if err != nil {
		log.Error(err, "unable to create pod-controller")
		os.Exit(1)
	}

	u := &unstructured.Unstructured{}
	u.SetGroupVersionKind(schema.GroupVersionKind{
		Kind:    "Pod",
		Group:   "",
		Version: "v1",
	})
	// Watch for Pod create / update / delete events and call Reconcile
	err = c.Watch(source.Kind(mgr.GetCache(), u, &handler.TypedEnqueueRequestForObject[*unstructured.Unstructured]{}))
	if err != nil {
		log.Error(err, "unable to watch pods")
		os.Exit(1)
	}
}
#+end_src


* References

** client-go

- mapping GVKs (group-version-kind like apps/v1/Deloyment) to GVR (group-version-resource used by the REST API like apps/v1/deployments): https://pkg.go.dev/k8s.io/client-go/restmapper
- converting unstructured to structured: https://erwinvaneyk.nl/kubernetes-unstructured-to-typed/
- how to use the unstructured API: https://ymmt2005.hatenablog.com/entry/2020/04/14/An_example_of_using_dynamic_client_of_k8s.io/client-go, https://aaronjwood.com/articles/dynamic-k8s-programming-1/
- using the cache: https://pkg.go.dev/k8s.io/client-go/tools/cache#Store
  
** controller runtime
- controller-runtime overview: https://tyk.io/blog/the-role-of-controller-runtime-manager-in-kubernetes-operators, plus all parts of https://nakamasato.medium.com/kubernetes-operator-series-5-controller-runtime-component-reconciler-501f71b7397a
- controller-runtime pkg components: https://pkg.go.dev/sigs.k8s.io/controller-runtime/pkg
- Cluster is used to interact with the cluster: https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.18.2/pkg/cluster#Cluster (interface available in Manager)
- Controller wraps the user-supplied Reconcile functionality: https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.18.2/pkg/controller#example-Controller
- make sure unstructured resources are cached in the manager: https://ymmt2005.hatenablog.com/entry/2021/07/25/Caching_Unstructured_Objects_using_controller-runtime
- Watch implements a rich API that specifies the type of an event (create, update, delete, generic): https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.18.2/pkg/handler#example-Funcs (Controller removes the event type and generates a ~reconcile.Request~ that does not contain the type any more)
- fake object source for testing: https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.18.2/pkg/source#example-Channel, maybe also https://pkg.go.dev/k8s.io/client-go/tools/cache/testing#FakeControllerSource, https://github.com/kubernetes-sigs/controller-runtime/blob/main/pkg/source/source_test.go

** metacontroller

- Metacontroller is an add-on for Kubernetes that makes it easy to write and deploy custom controllers: https://metacontroller.github.io/metacontroller/intro.html
- CompositeController does something similar of what we want (almost): https://metacontroller.github.io/metacontroller/api/compositecontroller.html

** mongodb golang driver
- docs: https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.15.0/mongo
- aggregator pipeline primitives: https://www.mongodb.com/resources/products/capabilities/aggregation-pipeline
- match: https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/
- project: https://www.mongodb.com/docs/manual/reference/operator/aggregation/project/
- lookup: https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/, complex joins: https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/#use--lookup-with--mergeobjects

** aggregate pipeline rules
- primitives (ops) start with ~@~, JSON paths start with ~$~, everything else is a literal
- when called with collection arg ~X~, the collection ~X~ is always available as ~X.{path}~; ~.{path}~ is the same if ~X~ is the only argument
- all ops take a ~Unstruct~ (~map[string]any~) or ~UnstructList~ (~[]any~) as input and produce an ~Unstruct~ or an ~UnstructList~ (see useful functions in ~apimachinery/pkg/apis/meta/v1/unstructured~ and ~apimachinery/pkg/runtime/converter.go~)
- collections and views are always indexed implicitly on ~namespace/name~ or as specified (unimplemented) 
- ops: input: ~UnstructList~, output: ~UnstructList~
  - @map <expr>: for each element of the input list perform the map the structure and return the resultant list
  - @match <expr>: for each element of the input list, evaluate the boolean expression and keep element if it evaluates to true, and return the resultant list
